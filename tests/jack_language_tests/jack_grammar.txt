classDeclar = "class" , identifier , "{" , { memberDeclar } , "}" ;
memberDeclar = classVarDeclar | subroutineDeclar ;
classVarDeclar = ("static" | "field") , type , identifier , { "," , identifier } , ";" ;
type = "int" | "char" | "boolean" | identifier ;
subroutineDeclar = ("constructor" | "function" | "method") , (type | "void") , identifier , "(" , paramList , ")" , subroutineBody ;
paramList = (type , identifier , { "," , type , identifier }) | "" ;
subroutineBody = "{" , { statement } , "}" ;
statement = varDeclarStatement | letStatemnt | ifStatement | whileStatement | doStatement | returnStatemnt ;
varDeclarStatement = "var" , type , identifier , { "," , identifier } , ";" ;
letStatemnt = "let" , identifier , [ "[" , expression , "]" ] , "=" , expression , ";" ;
ifStatement = "if" , "(" , expression , ")" , "{" , { statement } , "}" , [ "else" , "{" , { statement } , "}" ] ;
whileStatement = "while" , "(" , expression , ")" , "{" , { statement } , "}" ;
doStatement = "do" , subroutineCall , ";" ;
subroutineCall = identifier , [ "." , identifier ] , "(" , expressionList , ")" ;
expressionList = (expression , { "," , expression }) | "" ;
returnStatemnt = "return" , [ expression ] , ";" ;
expression = relationalExpression , { ("&" | "|") , relationalExpression } ;
relationalExpression = ArithmeticExpression , { ("=" | ">" | "<") , ArithmeticExpression } ;
ArithmeticExpression = term , { ("+" | "-") , term } ;
term = factor , { ("*" | "/") , factor } ;
factor = ("-" | "~" | "") , operand ;
operand = integerConstant | identifierTerm | parenExpression | stringLiteral | keywordConstant ;
identifierTerm = identifier , (dotIdentifier | arrayAccess | subroutineCallExpr | "") ;
dotIdentifier = "." , identifier , (subroutineCallExpr | "") ;
arrayAccess = "[" , expression , "]" ;
subroutineCallExpr = "(" , expressionList , ")" ;
parenExpression = "(" , expression , ")" ;
keywordConstant = "true" | "false" | "null" | "this" ;